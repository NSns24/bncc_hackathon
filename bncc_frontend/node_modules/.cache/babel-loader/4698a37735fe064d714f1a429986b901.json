{"ast":null,"code":"var _jsxFileName = \"/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY\");\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address;\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log(\"city\", city, area, state);\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * And function for city,state and address input\n   * @param event\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: \"100%\",\n        height: \"40px\",\n        paddingLeft: \"16px\",\n        marginTop: \"2px\",\n        marginBottom: \"100px\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [\"(regions)\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: \"Dolores park\",\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","Map","Component","constructor","props","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","area","city","state","error","console","center","componentDidMount","addressArray","address_components","getCity","getArea","getState","log","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    withGoogleMap,\n    GoogleMap,\n    withScriptjs,\n    InfoWindow,\n    Marker\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY\");\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: \"\",\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        };\n    }\n    /**\n     * Get the current address from the default map position and set those values in the state\n     */\n    componentDidMount() {\n        Geocode.fromLatLng(\n            this.state.mapPosition.lat,\n            this.state.mapPosition.lng\n        ).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n\n                console.log(\"city\", city, area, state);\n\n                this.setState({\n                    address: address ? address : \"\",\n                    area: area ? area : \"\",\n                    city: city ? city : \"\",\n                    state: state ? state : \"\"\n                });\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    }\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true;\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false;\n        }\n    }\n\n    /**\n     * And function for city,state and address input\n     * @param event\n     */\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    /**\n     * This Event triggers when the marker window is closed\n     *\n     * @param event\n     */\n    onInfoWindowClose = event => {};\n    /**\n     * When the user types an address in the search box\n     * @param place\n     */\n    onPlaceSelected = place => {\n        const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n        // Set these values in the state.\n        this.setState({\n            address: address ? address : \"\",\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            }\n        });\n    };\n    /**\n     * When the marker is dragged you get the lat and long using the functions available from event object.\n     * Use geocode to get the address, city, area and state from the lat and lng positions.\n     * And then set those values in the state.\n     *\n     * @param event\n     */\n    onMarkerDragEnd = event => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address;\n                this.setState({\n                    address: address ? address : \"\",\n                    area: area ? area : \"\",\n                    city: city ? city : \"\",\n                    state: state ? state : \"\"\n                });\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(props => (\n                <GoogleMap\n                    google={this.props.google}\n                    defaultZoom={this.props.zoom}\n                    defaultCenter={{\n                        lat: this.state.mapPosition.lat,\n                        lng: this.state.mapPosition.lng\n                    }}\n                >\n                    {/* For Auto complete Search Box */}\n                    <Autocomplete\n                        style={{\n                            width: \"100%\",\n                            height: \"40px\",\n                            paddingLeft: \"16px\",\n                            marginTop: \"2px\",\n                            marginBottom: \"100px\"\n                        }}\n                        onPlaceSelected={this.onPlaceSelected}\n                        types={[\"(regions)\"]}\n                    />\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={\"Dolores park\"}\n                        draggable={true}\n                        onDragEnd={this.onMarkerDragEnd}\n                        position={{\n                            lat: this.state.markerPosition.lat,\n                            lng: this.state.markerPosition.lng\n                        }}\n                    />\n                    <Marker />\n                    {/* InfoWindow on top of marker */}\n                    <InfoWindow\n                        onClose={this.onInfoWindowClose}\n                        position={{\n                            lat: this.state.markerPosition.lat + 0.0018,\n                            lng: this.state.markerPosition.lng\n                        }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>\n                                {this.state.address}\n                            </span>\n                        </div>\n                    </InfoWindow>\n                </GoogleMap>\n            ))\n        );\n        let map;\n        if (this.props.center.lat !== undefined) {\n            map = (\n                <div>\n                    <div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">Address</label>\n                            <input\n                                type=\"text\"\n                                name=\"address\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.address}\n                            />\n                        </div>\n                    </div>\n                    <AsyncMap\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY&libraries=places\"\n                        loadingElement={<div style={{ height: `100%` }} />}\n                        containerElement={\n                            <div style={{ height: this.props.height }} />\n                        }\n                        mapElement={<div style={{ height: `100%` }} />}\n                    />\n                </div>\n            );\n        } else {\n            map = <div style={{ height: this.props.height }} />;\n        }\n        return map;\n    }\n}\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}