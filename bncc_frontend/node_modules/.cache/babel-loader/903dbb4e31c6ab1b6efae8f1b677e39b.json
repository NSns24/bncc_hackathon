{"ast":null,"code":"var _jsxFileName = \"/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[i].types[j] || \"locality\" === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && \"administrative_area_level_1\" === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log(\"city\", city, area, state);\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n   * Get the city and set the city input value to the one selected\n   *\n   * @param addressArray\n   * @return {string}\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"City\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Area\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"State\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","address","mapPosition","lat","center","lng","markerPosition","componentDidMount","fromLatLng","then","response","results","formatted_address","address_components","console","log","error","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","map","undefined","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    withGoogleMap,\n    GoogleMap,\n    withScriptjs,\n    InfoWindow,\n    Marker\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: \"\",\n            city: \"\",\n            area: \"\",\n            state: \"\",\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        };\n    }\n    /**\n     * Get the current address from the default map position and set those values in the state\n     */\n    componentDidMount() {\n        Geocode.fromLatLng(\n            this.state.mapPosition.lat,\n            this.state.mapPosition.lng\n        ).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n\n                console.log(\"city\", city, area, state);\n\n                this.setState({\n                    address: address ? address : \"\",\n                    area: area ? area : \"\",\n                    city: city ? city : \"\",\n                    state: state ? state : \"\"\n                });\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    }\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true;\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false;\n        }\n    }\n    /**\n     * Get the city and set the city input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getCity = addressArray => {\n        let city = \"\";\n        for (let i = 0; i < addressArray.length; i++) {\n            if (\n                addressArray[i].types[0] &&\n                \"administrative_area_level_2\" === addressArray[i].types[0]\n            ) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n    /**\n     * Get the area and set the area input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getArea = addressArray => {\n        let area = \"\";\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if (\n                        \"sublocality_level_1\" === addressArray[i].types[j] ||\n                        \"locality\" === addressArray[i].types[j]\n                    ) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Get the address and set the address input value to the one selected\n     *\n     * @param addressArray\n     * @return {string}\n     */\n    getState = addressArray => {\n        let state = \"\";\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (\n                    addressArray[i].types[0] &&\n                    \"administrative_area_level_1\" === addressArray[i].types[0]\n                ) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n    /**\n     * And function for city,state and address input\n     * @param event\n     */\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    /**\n     * This Event triggers when the marker window is closed\n     *\n     * @param event\n     */\n    onInfoWindowClose = event => {};\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(props => (\n                <GoogleMap\n                    google={this.props.google}\n                    defaultZoom={this.props.zoom}\n                    defaultCenter={{\n                        lat: this.state.mapPosition.lat,\n                        lng: this.state.mapPosition.lng\n                    }}\n                />\n            ))\n        );\n        let map;\n        if (this.props.center.lat !== undefined) {\n            map = (\n                <div>\n                    <div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">City</label>\n                            <input\n                                type=\"text\"\n                                name=\"city\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.city}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">Area</label>\n                            <input\n                                type=\"text\"\n                                name=\"area\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.area}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">State</label>\n                            <input\n                                type=\"text\"\n                                name=\"state\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.state}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">Address</label>\n                            <input\n                                type=\"text\"\n                                name=\"address\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.address}\n                            />\n                        </div>\n                    </div>\n                    <AsyncMap\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\n                        loadingElement={<div style={{ height: `100%` }} />}\n                        containerElement={\n                            <div style={{ height: this.props.height }} />\n                        }\n                        mapElement={<div style={{ height: `100%` }} />}\n                    />\n                </div>\n            );\n        } else {\n            map = <div style={{ height: this.props.height }} />;\n        }\n        return map;\n    }\n}\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}