{"ast":null,"code":"var _jsxFileName = \"/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nimport { connect } from \"react-redux\";\nGeocode.setApiKey(\"AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY\");\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address;\n        this.setState({\n          address: address ? address : \"\"\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      city: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n   * Get the current address from the default map position and set those values in the state\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address;\n      this.setState({\n        address: address ? address : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n   *\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Autocomplete, {\n      style: {\n        width: \"100%\",\n        height: \"40px\",\n        paddingLeft: \"16px\",\n        marginTop: \"2px\",\n        marginBottom: \"100px\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [\"(regions)\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      google: this.props.google,\n      name: \"Dolores park\",\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(Marker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Address\"), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChangeLocation: (lat, long) => dispatch()\n  };\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/ns/Code/bncc_frontend/src/containers/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","connect","setApiKey","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","console","state","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","area","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","map","undefined","mapDispatchToProps","dispatch","onChangeLocation","long"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    withGoogleMap,\n    GoogleMap,\n    withScriptjs,\n    InfoWindow,\n    Marker\n} from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nimport { connect } from \"react-redux\";\n\nGeocode.setApiKey(\"AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY\");\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: \"\",\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        };\n    }\n    /**\n     * Get the current address from the default map position and set those values in the state\n     */\n    componentDidMount() {\n        Geocode.fromLatLng(\n            this.state.mapPosition.lat,\n            this.state.mapPosition.lng\n        ).then(\n            response => {\n                const address = response.results[0].formatted_address;\n\n                this.setState({\n                    address: address ? address : \"\"\n                });\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    }\n    /**\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n     *\n     * @param nextProps\n     * @param nextState\n     * @return {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true;\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false;\n        }\n    }\n\n    getCity = addressArray => {\n        let city = \"\";\n        for (let i = 0; i < addressArray.length; i++) {\n            if (\n                addressArray[i].types[0] &&\n                \"administrative_area_level_2\" === addressArray[i].types[0]\n            ) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n\n    /**\n     * And function for city,state and address input\n     * @param event\n     */\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    /**\n     * This Event triggers when the marker window is closed\n     *\n     * @param event\n     */\n    onInfoWindowClose = event => {};\n    /**\n     * When the user types an address in the search box\n     * @param place\n     */\n    onPlaceSelected = place => {\n        const address = place.formatted_address,\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n        // Set these values in the state.\n        this.setState({\n            address: address ? address : \"\",\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            }\n        });\n    };\n    /**\n     * When the marker is dragged you get the lat and long using the functions available from event object.\n     * Use geocode to get the address, city, area and state from the lat and lng positions.\n     * And then set those values in the state.\n     *\n     * @param event\n     */\n    onMarkerDragEnd = event => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address;\n\n                this.setState({\n                    address: address ? address : \"\"\n                });\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(props => (\n                <GoogleMap\n                    google={this.props.google}\n                    defaultZoom={this.props.zoom}\n                    defaultCenter={{\n                        lat: this.state.mapPosition.lat,\n                        lng: this.state.mapPosition.lng\n                    }}\n                >\n                    {/* For Auto complete Search Box */}\n                    <Autocomplete\n                        style={{\n                            width: \"100%\",\n                            height: \"40px\",\n                            paddingLeft: \"16px\",\n                            marginTop: \"2px\",\n                            marginBottom: \"100px\"\n                        }}\n                        onPlaceSelected={this.onPlaceSelected}\n                        types={[\"(regions)\"]}\n                    />\n                    {/*Marker*/}\n                    <Marker\n                        google={this.props.google}\n                        name={\"Dolores park\"}\n                        draggable={true}\n                        onDragEnd={this.onMarkerDragEnd}\n                        position={{\n                            lat: this.state.markerPosition.lat,\n                            lng: this.state.markerPosition.lng\n                        }}\n                    />\n                    <Marker />\n                    {/* InfoWindow on top of marker */}\n                    <InfoWindow\n                        onClose={this.onInfoWindowClose}\n                        position={{\n                            lat: this.state.markerPosition.lat + 0.0018,\n                            lng: this.state.markerPosition.lng\n                        }}\n                    >\n                        <div>\n                            <span style={{ padding: 0, margin: 0 }}>\n                                {this.state.address}\n                            </span>\n                        </div>\n                    </InfoWindow>\n                </GoogleMap>\n            ))\n        );\n        let map;\n        if (this.props.center.lat !== undefined) {\n            map = (\n                <div>\n                    <div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"\">Address</label>\n                            <input\n                                type=\"text\"\n                                name=\"address\"\n                                className=\"form-control\"\n                                onChange={this.onChange}\n                                readOnly=\"readOnly\"\n                                value={this.state.address}\n                            />\n                        </div>\n                    </div>\n                    <AsyncMap\n                        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvORlEqFZYFwTly_z5nnKf-PaUOXqYgRY&libraries=places\"\n                        loadingElement={<div style={{ height: `100%` }} />}\n                        containerElement={\n                            <div style={{ height: this.props.height }} />\n                        }\n                        mapElement={<div style={{ height: `100%` }} />}\n                    />\n                </div>\n            );\n        } else {\n            map = <div style={{ height: this.props.height }} />;\n        }\n        return map;\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onChangeLocation: (lat, long) => dispatch()\n    };\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}